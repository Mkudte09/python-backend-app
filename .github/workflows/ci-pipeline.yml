# =======================================
# GitHub Actions Workflow: CI/CD Pipeline
# =======================================
# This pipeline builds, tests, deploys, and optionally notifies after deployment
# for a Python backend app hosted on GitHub and deployed to a GCP VM.

name: CI/CD Pipeline

# -------------------------------
# Trigger this workflow on:
# - push to the main branch
# - pull requests targeting the main branch
# -------------------------------
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # =====================================
  # 1. Build and Test Job (Reusable Call)
  # =====================================
  # This job runs the reusable workflow that checks out the code,
  # installs dependencies, lints with flake8, and runs unit tests with pytest.
  build-and-test:
    uses: ./.github/workflows/build-and-test.yml  # Local reusable workflow

  # ========================
  # 2. Deployment to GCP VM
  # ========================
  # This job starts only after build-and-test succeeds.
  # It connects to the GCP VM via SSH using the appleboy/ssh-action.
  # Only runs when changes are pushed to the 'main' branch.
  deploy:
    needs: build-and-test  # Ensure tests pass before deploying
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Only deploy from 'main' branch
    steps:
      - name: Deploy to GCP VM via SSH
        uses: appleboy/ssh-action@v1.0.0  # GitHub Action to run remote SSH commands
        with:
          host: ${{ secrets.GCP_VM_IP }}            # GCP VM external IP (saved as secret)
          username: ${{ secrets.GCP_VM_USER }}       # SSH username for VM (saved as secret)
          key: ${{ secrets.GCP_VM_SSH_KEY }}         # Private SSH key (saved as secret)
          port: 22                                   # Default SSH port
          script: |
            cd ~/python-backend-app                  # Navigate to the app directory
            git pull origin main                     # Pull the latest changes
            pip3 install --user -r requirements.txt  # Install dependencies
            pkill -f "python3 app/main.py" || true   # Kill running app if exists (ignore error if not running)
            nohup python3 app/main.py > app.log 2>&1 &  # Start app in background and redirect output
            disown                                   # Detach process from shell to avoid exit 143
            echo "App started successfully"
        continue-on-error: true  # Prevent failure due to non-zero exit (e.g., disown or pkill)

  # ========================
  # 3. Notification Job (Dummy for Now)
  # ========================
  # Placeholder notification job. You can later extend it to:
  # - Send GitHub Webhook messages
  # - Post to Slack/Discord/Email etc.
  notify:
  # Always run this job, even if previous jobs (like deploy) fail
  if: always()

  # This job depends on the completion of the 'deploy' job
  needs: [deploy]

  # Use Ubuntu runner
  runs-on: ubuntu-latest

  steps:
    # Step 1: Determine if deploy was successful or failed
    - name: Set notification status
      id: status  # ID used to reference outputs in next step
      run: |
        # Check the result of the deploy job
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          # Set custom output STATUS to success message with emoji
          echo "STATUS=✅ Deployment Succeeded" >> $GITHUB_OUTPUT
        else
          # Set custom output STATUS to failure message with emoji
          echo "STATUS=❌ Deployment Failed" >> $GITHUB_OUTPUT
        fi

    # Step 2: Send a Slack notification using the webhook
    - name: Send Slack notification
      uses: slackapi/slack-github-action@v1.24.0  # Official Slack GitHub Action
      with:
        # Payload is the actual content that gets sent to Slack
        payload: |
          {
            "text": "${{ steps.status.outputs.STATUS }} for *${{ github.repository }}* on branch *${{ github.ref_name }}*",
            "attachments": [
              {
                "color": "${{ needs.deploy.result == 'success' && 'good' || 'danger' }}",
                "fields": [
                  {
                    "title": "Workflow",
                    "value": "${{ github.workflow }}",
                    "short": true
                  },
                  {
                    "title": "Run Number",
                    "value": "${{ github.run_number }}",
                    "short": true
                  }
                ]
              }
            ]
          }

      # Pass Slack webhook URL from GitHub secrets
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

